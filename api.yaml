openapi: 3.0.4
info:
  title: Inventory Management API
  description: This is a basic inventory management API for small MSME.
  version: 0.0.1

servers:
  - url: http://localhost:3000/api/v1
    description: Local Development Server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /auth/register:
    post:
      summary: User Registration
      description: Register a new user by providing email, password, and other details.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - first_name
                - last_name
                - role
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: StrongPassword123!
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                role:
                  type: string
                  enum:
                    [
                      ADMIN,
                      PURCHASING_MANAGER,
                      SUPPLIER,
                      SALES_MANAGER,
                      CUSTOMER,
                      OTHERS,
                    ]
                  example: CUSTOMER
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "User registered successfully"
        "400":
          description: Bad Request (Invalid input or email already exists)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "User already exists"

  /auth/login:
    post:
      summary: User Login
      description: Authenticate user and return a JWT token.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: StrongPassword123!
      responses:
        "200":
          description: Successful login, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login successful"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        "401":
          description: Unauthorized (Invalid email or password)
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Invalid credentials"

  /products:
    get:
      summary: Get all products with pagination, filtering, and search
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of products per page
          required: false
          schema:
            type: integer
            example: 10
        - name: status
          in: query
          description: Filter products by status (ACTIVE or INACTIVE)
          required: false
          schema:
            type: string
            enum: [ACTIVE, INACTIVE]
        - name: search
          in: query
          description: Search products by name or description
          required: false
          schema:
            type: string
        - name: sort_by
          in: query
          description: Column to sort products by
          required: false
          schema:
            type: string
            enum: [name, price, stock_quantity, created_at, updated_at]
            example: "price"
        - name: order
          in: query
          description: Sorting order (ascending or descending)
          required: false
          schema:
            type: string
            enum: [asc, desc]
            example: "desc"
      responses:
        "200":
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: object
        "500":
          description: Internal server error

    post:
      summary: Create a new product (Admin & Purchasing Manager only)
      tags:
        - Products
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Smartphone"
                description:
                  type: string
                  example: "Latest model with high battery backup"
                price:
                  type: number
                  format: float
                  example: 799.99
                stock_quantity:
                  type: integer
                  example: 50
                status:
                  type: string
                  enum: [ACTIVE, INACTIVE]
                  example: "ACTIVE"
      responses:
        "201":
          description: Product created successfully
        "500":
          description: Internal server error

  /products/{id}:
    put:
      summary: Update an existing product
      description: Allows an authorized user (ADMIN or PURCHASING_MANAGER) to update product details. At least one field must be provided for an update.
      tags:
        - Products
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
          description: The unique ID of the product to be updated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 3
                  description: Updated name of the product (optional).
                price:
                  type: number
                  format: float
                  minimum: 0.01
                  description: Updated price of the product (optional).
                description:
                  type: string
                  nullable: true
                  description: Updated description of the product (optional).
                stock_quantity:
                  type: integer
                  minimum: 0
                  description: Updated stock quantity of the product (optional).
                status:
                  type: string
                  enum: [ACTIVE, INACTIVE]
                  description: Updated status of the product (optional).
      responses:
        "200":
          description: Product successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product updated successfully."
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "New Product Name"
                      price:
                        type: number
                        example: 99.99
                      description:
                        type: string
                        example: "Updated product description."
                      stock_quantity:
                        type: integer
                        example: 50
                      status:
                        type: string
                        example: "ACTIVE"
        "400":
          description: Validation error or bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "At least one valid field is required for update."
        "401":
          description: Unauthorized request (invalid or missing token).
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized. Token missing or invalid."
        "403":
          description: Forbidden. User does not have the required role.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Access denied. Insufficient permissions."
        "404":
          description: Product not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Product not found."
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Internal server error."
    delete:
      summary: Delete a product
      description: Deletes a product by its ID. Only users with the 'ADMIN' role can delete a product.
      tags:
        - Products
      security:
        - BearerAuth: [] # Requires authentication with a Bearer token
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the product to delete
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: Product successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Product deleted successfully."
        400:
          description: Invalid product ID format
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "ID must be a positive number."
        404:
          description: Product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Product not found."
        401:
          description: Unauthorized - User not authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Unauthorized: Token required."
        403:
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Forbidden: You do not have permission to delete this product."
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Internal server error."
